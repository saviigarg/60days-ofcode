class Solution{
public:
    void dfsFill(int u, vector<vector<int>>& adj,  vector<bool> &visited, stack<int> &st){
      visited[u] = true;
      for(int &v : adj[u]){
        if(!visited[v]){
          dfsFill(v, adj, visited, st);
        }
      }
      st.push(u);
    }
    void dfsTraversal(int u, vector<vector<int>>& adjReversed, vector<bool> &visited){
      visited[u] = true;
      for(int &v : adjReversed[u]){
        if(!visited[v]){
          dfsTraversal(v, adjReversed, visited);
        }
      }
    }
//function to find no. of strongly connected components in the graph
    int kosaraju(int V, vector<vector<int>>& adj){
      //step 1 : store order of dfs in stack
      //topo-sort
      stack<int> st;
      vector<bool> visited(V, false);
      for(int i=0; i<V; i++){
        if(!visited[i]){
          dfsFill(i,adj,visited,st);
        }
      }
      //step 2 : make a reversed graph
      vector<vector<int>> adjReversed(V);
      for(int u=0; u<V; u++){
        for(int &v : adj[u]){
          //u -> v
          adjReversed[v].push_back(u);
        }
      }
      //stack 3 : call dfs based on stck order
      int countScc = 0;
      visited = vector<bool>(V,false);
      while(!st.empty()){
        int node = st.top();
        st.pop();
        if(!visited[node]){
          dfsTraversal(node, adjReversed, visited );
          countScc++;
        }
      }
      return countScc;
    }
};

#include <iostream>
#include <vector>

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int value) : val(value), left(nullptr), right(nullptr) {}
};

class Solution {
public:
    void preorder(TreeNode* root, std::vector<int>& ans) {
        if (root == NULL) return;
        ans.push_back(root->val);
        preorder(root->left, ans);
        preorder(root->right, ans);
    }

    void postOrder(TreeNode* root, std::vector<int>& ans) {
        if (!root) return;
        postOrder(root->left, ans);
        postOrder(root->right, ans);
        ans.push_back(root->val);
    }

    void inOrder(TreeNode* root, std::vector<int>& ans) {
        if (!root) return;
        inOrder(root->left, ans);
        ans.push_back(root->val);
        inOrder(root->right, ans);
    }

    std::vector<int> preorderTraversal(TreeNode* root) {
        std::vector<int> ans;
        preorder(root, ans);
        return ans;
    }

    std::vector<int> postorderTraversal(TreeNode* root) {
        std::vector<int> ans;
        postOrder(root, ans);
        return ans;
    }

    std::vector<int> inorderTraversal(TreeNode* root) {
        std::vector<int> ans;
        inOrder(root, ans);
        return ans;
    }
};

// Function to build a binary tree from user input
TreeNode* buildTree() {
    int val;
    std::cout << "Enter the value for the node (enter -1 for NULL): ";
    std::cin >> val;

    if (val == -1) {
        return nullptr;
    }

    TreeNode* root = new TreeNode(val);

    std::cout << "Enter the values for left child of " << val << ": ";
    root->left = buildTree();

    std::cout << "Enter the values for right child of " << val << ": ";
    root->right = buildTree();

    return root;
}

int main() {
    // Taking input for a binary tree
    TreeNode* root = buildTree();

    Solution solution;

    std::cout << "Pre-order Traversal: ";
    for (int val : solution.preorderTraversal(root)) {
        std::cout << val << " ";
    }
    std::cout << std::endl;

    std::cout << "Post-order Traversal: ";
    for (int val : solution.postorderTraversal(root)) {
        std::cout << val << " ";
    }
    std::cout << std::endl;

    std::cout << "In-order Traversal: ";
    for (int val : solution.inorderTraversal(root)) {
        std::cout << val << " ";
    }
    std::cout << std::endl;

    return 0;
}

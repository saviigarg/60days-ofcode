#include <iostream>
#include <vector>
#include <list>
#include <algorithm>

class Hashing {
    std::vector<std::list<int>> hashtable;
    int buckets;

public:
    Hashing(int size) {
        buckets = size;
        hashtable.resize(size);
    }

    int hashvalue(int key) {
        return key % buckets;
    }

    void addkey(int key) {
        int idx = hashvalue(key);
        hashtable[idx].push_back(key);
    }

    std::list<int>::iterator searchkey(int key) {
        int idx = hashvalue(key);
        return std::find(hashtable[idx].begin(), hashtable[idx].end(), key);
    }

    void deletekey(int key) {
        int idx = hashvalue(key);  // Declare idx here
        auto keyIter = searchkey(key);

        if (keyIter != hashtable[idx].end()) {
            hashtable[idx].erase(keyIter);
            std::cout << key << " is deleted" << std::endl;
        } else {
            std::cout << "Key is not present in the hashtable" << std::endl;
        }
    }
};

int main() {
    Hashing h(10);
    h.addkey(5);
    h.addkey(9);
    h.addkey(3);
    h.deletekey(3);
    return 0;
}
